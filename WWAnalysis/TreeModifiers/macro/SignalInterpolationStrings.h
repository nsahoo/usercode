#include <vector>
#include <iostream>
#include <iomanip>
#include <utility>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <cmath>
#include <algorithm>

bool doFFT;

std::string getSignalCBMeanString(float m, int ch, bool do7TeV) {
    stringstream fss;
    fss << "( ";  

    if (!doFFT) fss << "@0 + ";

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(0.384127) + (-0.0126792*@0) + (0.000206831*@0*@0) + (-1.76795e-06*@0*@0*@0) + (6.64986e-09*@0*@0*@0*@0) + (-8.61485e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(13.0613) + (-0.334042*@0) + (0.00314782*@0*@0) + (-1.43908e-05*@0*@0*@0) + (3.11806e-08*@0*@0*@0*@0) + (-2.52155e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(7.74041) + (-0.1993*@0) + (0.00199694*@0*@0) + (-1.00463e-05*@0*@0*@0) + (2.46727e-08*@0*@0*@0*@0) + (-2.33501e-11*@0*@0*@0*@0*@0)";
      }
      else {
        cout << "using the right pars" << endl;
        if (ch == 0) fss << "(-5.71849) + (0.145626*@0) + (-0.00138862*@0*@0) + (6.03825e-06*@0*@0*@0) + (-1.19684e-08*@0*@0*@0*@0) + (8.75281e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(14.8494) + (-0.405085*@0) + (0.00422887*@0*@0) + (-2.16441e-05*@0*@0*@0) + (5.32721e-08*@0*@0*@0*@0) + (-5.00455e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-0.105779) + (0.00847961*@0) + (-0.000136448*@0*@0) + (6.51254e-07*@0*@0*@0) + (-1.49774e-09*@0*@0*@0*@0) + (1.80475e-12*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(6.43129) + (-0.0218293*@0) + (3.48746e-05*@0*@0) + (-3.06081e-08*@0*@0*@0)";
        if (ch == 1) fss << "(-57.0151) + (0.279453*@0) + (-0.000428555*@0*@0) + (1.93863e-07*@0*@0*@0)";
        if (ch == 2) fss << "(82.1279) + (-0.457539*@0) + (0.000816838*@0*@0) + (-4.6665e-07*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-86.5422) + (0.447758*@0) + (-0.000708361*@0*@0) + (3.2711e-07*@0*@0*@0)";
        if (ch == 1) fss << "(-96.4993) + (0.472794*@0) + (-0.000704832*@0*@0) + (3.08549e-07*@0*@0*@0)";
        if (ch == 2) fss << "(-96.4993) + (0.472794*@0) + (-0.000704832*@0*@0) + (3.08549e-07*@0*@0*@0)";
      }
    }

    fss << " ) * (1+@1)";
    return fss.str();
}

std::string getSignalCBSigmaString(float m, int ch, bool do7TeV) {
    stringstream fss;
    fss << "( ";  

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-17.0408) + (0.455437*@0) + (-0.00447787*@0*@0) + (2.13726e-05*@0*@0*@0) + (-4.82412e-08*@0*@0*@0*@0) + (4.14871e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-50.4414) + (1.36935*@0) + (-0.0138086*@0*@0) + (6.67852e-05*@0*@0*@0) + (-1.53815e-07*@0*@0*@0*@0) + (1.35197e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-32.5568) + (0.867983*@0) + (-0.00861782*@0*@0) + (4.13108e-05*@0*@0*@0) + (-9.4314e-08*@0*@0*@0*@0) + (8.23655e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-4.56178) + (0.123209*@0) + (-0.00107193*@0*@0) + (4.5413e-06*@0*@0*@0) + (-8.19429e-09*@0*@0*@0*@0) + (4.75955e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-15.2189) + (0.442707*@0) + (-0.00452573*@0*@0) + (2.27111e-05*@0*@0*@0) + (-5.39753e-08*@0*@0*@0*@0) + (4.8518e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-22.99) + (0.622596*@0) + (-0.00619149*@0*@0) + (2.98679e-05*@0*@0*@0) + (-6.82954e-08*@0*@0*@0*@0) + (5.92218e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(-100.987) + (0.422045*@0) + (-0.000579599*@0*@0) + (3.89257e-07*@0*@0*@0)";
        if (ch == 1) fss << "(132.52) + (-0.797134*@0) + (0.00144076*@0*@0) + (-6.8979e-07*@0*@0*@0)";
        if (ch == 2) fss << "(41.2978) + (-0.237919*@0) + (0.000343944*@0*@0) + (-1.18454e-08*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(151.967) + (-0.939938*@0) + (0.00173551*@0*@0) + (-8.26677e-07*@0*@0*@0)";
        if (ch == 1) fss << "(107.493) + (-0.624171*@0) + (0.0010989*@0*@0) + (-4.61003e-07*@0*@0*@0)";
        if (ch == 2) fss << "(225.609) + (-1.28759*@0) + (0.00224219*@0*@0) + (-1.0702e-06*@0*@0*@0)";
      }
    }
    
    fss << " ) * (1+@1)";
    return fss.str();
}

std::string getSignalCBAlphaLString(float m, int ch, bool do7TeV) {
    stringstream fss;
   
    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-14.8561) + (0.397858*@0) + (-0.00372053*@0*@0) + (1.6534e-05*@0*@0*@0) + (-3.4873e-08*@0*@0*@0*@0) + (2.80354e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-27.9295) + (0.769192*@0) + (-0.00791726*@0*@0) + (3.8902e-05*@0*@0*@0) + (-9.1425e-08*@0*@0*@0*@0) + (8.26417e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-19.1247) + (0.511858*@0) + (-0.00507084*@0*@0) + (2.40314e-05*@0*@0*@0) + (-5.4294e-08*@0*@0*@0*@0) + (4.70018e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-6.83599) + (0.196814*@0) + (-0.00179054*@0*@0) + (7.59602e-06*@0*@0*@0) + (-1.48893e-08*@0*@0*@0*@0) + (1.07477e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-22.3693) + (0.627422*@0) + (-0.0064991*@0*@0) + (3.20674e-05*@0*@0*@0) + (-7.51115e-08*@0*@0*@0*@0) + (6.71038e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-30.8723) + (0.829062*@0) + (-0.00831694*@0*@0) + (3.99262e-05*@0*@0*@0) + (-9.13993e-08*@0*@0*@0*@0) + (7.98904e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(-2.57481) + (0.00999273*@0) + (-6.489e-06*@0*@0)";
        if (ch == 1) fss << "(2.01281) + (-0.00136512*@0)";
        if (ch == 2) fss << "(1.94522) + (-0.0012104*@0)";
      }
      else {
        if (ch == 0) fss << "(1.6377) + (-0.000344394*@0)";
        if (ch == 1) fss << "(0.807196) + (0.000324715*@0)";
        if (ch == 2) fss << "(1.26942) + (-0.000113644*@0)";
      }
    }

    return fss.str();
}

std::string getSignalCBNLString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(47.0885) + (-1.08483*@0) + (0.0100817*@0*@0) + (-4.5054e-05*@0*@0*@0) + (9.66454e-08*@0*@0*@0*@0) + (-7.99252e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-264.134) + (5.93067*@0) + (-0.0485647*@0*@0) + (0.000188811*@0*@0*@0) + (-3.54147e-07*@0*@0*@0*@0) + (2.58623e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-80.2755) + (1.92682*@0) + (-0.0163889*@0*@0) + (6.61152e-05*@0*@0*@0) + (-1.29134e-07*@0*@0*@0*@0) + (9.86492e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(24.2026) + (-0.5443*@0) + (0.00517101*@0*@0) + (-2.3485e-05*@0*@0*@0) + (5.07143e-08*@0*@0*@0*@0) + (-4.18694e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-197.954) + (4.6367*@0) + (-0.0391504*@0*@0) + (0.000155755*@0*@0*@0) + (-2.97342e-07*@0*@0*@0*@0) + (2.20176e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(94.5871) + (-2.4248*@0) + (0.0251074*@0*@0) + (-0.000124389*@0*@0*@0) + (2.92829e-07*@0*@0*@0*@0) + (-2.62355e-10*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(39.7214) + (-0.139019*@0) + (0.000201855*@0*@0) + (-9.31525e-08*@0*@0*@0)";
        if (ch == 1) fss << "(-64.4151) + (0.302132*@0) + (-0.000401769*@0*@0) + (1.75386e-07*@0*@0*@0)";
        if (ch == 2) fss << "(-27.4789) + (0.146712*@0) + (-0.000188824*@0*@0) + (7.99675e-08*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-9.1524) + (0.0730485*@0) + (-9.1524e-05*@0*@0) + (3.76554e-08*@0*@0*@0)";
        if (ch == 1) fss << "(-15.5676) + (0.0957725*@0) + (-0.000117759*@0*@0) + (4.75733e-08*@0*@0*@0)";
        if (ch == 2) fss << "(-5.08746) + (0.0588206*@0) + (-7.53751e-05*@0*@0) + (3.17173e-08*@0*@0*@0)";
      }
    }

    return fss.str();
}

std::string getSignalCBAlphaRString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-4.30205) + (0.161563*@0) + (-0.00171347*@0*@0) + (8.68521e-06*@0*@0*@0) + (-2.06804e-08*@0*@0*@0*@0) + (1.84821e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(42.2455) + (-1.00717*@0) + (0.00946046*@0*@0) + (-4.20221e-05*@0*@0*@0) + (8.95679e-08*@0*@0*@0*@0) + (-7.39631e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(2.83488) + (-0.0208357*@0) + (8.703e-05*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-26.1111) + (0.767139*@0) + (-0.00830412*@0*@0) + (4.35986e-05*@0*@0*@0) + (-1.10717e-07*@0*@0*@0*@0) + (1.09256e-10*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-33.5339) + (0.956795*@0) + (-0.0100707*@0*@0) + (4.99974e-05*@0*@0*@0) + (-1.15201e-07*@0*@0*@0*@0) + (9.94549e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-9.33887) + (0.328801*@0) + (-0.00396139*@0*@0) + (2.27841e-05*@0*@0*@0) + (-6.14787e-08*@0*@0*@0*@0) + (6.23412e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(-2.57481) + (0.00999273*@0) + (-6.489e-06*@0*@0)";
        if (ch == 1) fss << "(4.49443) + (-0.00436133*@0)";
        if (ch == 2) fss << "(0.878941) + (0.000326235*@0)";
      }
      else {
        if (ch == 0) fss << "(15.6515) + (-0.0460885*@0) + (3.61238e-05*@0*@0)";
        if (ch == 1) fss << "(16.0914) + (-0.0433479*@0) + (3.09642e-05*@0*@0)";
        if (ch == 2) fss << "(5.48901) + (-0.0144101*@0) + (1.15529e-05*@0*@0)";
      }
    }

    return fss.str();
}

std::string getSignalCBNRString(float m, int ch, bool do7TeV) {
    stringstream fss;
    
    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
      else {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
      else {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
    }

    return fss.str();
}


std::string getSignalBWGammaString(float m, int ch, bool do7TeV) {
    stringstream fss;
    fss << "( ";  

    if (do7TeV) {
      if (ch == 0) fss << "TMath::Max((116.012) + (-0.814751*@0) + (0.00196863*@0*@0) + (-1.18544e-06*@0*@0*@0),30)";
      if (ch == 1) fss << "TMath::Max((-374.291) + (1.52069*@0) + (-0.00153017*@0*@0) + (4.37304e-07*@0*@0*@0),30)";
      if (ch == 2) fss << "TMath::Max((59.6861) + (-0.59096*@0) + (0.00169122*@0*@0) + (-1.05572e-06*@0*@0*@0),30)";
    }
    else {
      if (ch == 0) fss << "TMath::Max((-204.695) + (1.06734*@0) + (-0.00151823*@0*@0) + (7.88569e-07*@0*@0*@0),30)";
      if (ch == 1) fss << "TMath::Max((-446.657) + (2.13856*@0) + (-0.00298553*@0*@0) + (1.4181e-06*@0*@0*@0),30)";
      if (ch == 2) fss << "TMath::Max((-559.553) + (2.68625*@0) + (-0.00383806*@0*@0) + (1.84304e-06*@0*@0*@0),30)";
    }

    fss << " ) * (1+@1)";    
    return fss.str();
}


std::string getYieldEfficiencyString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (do7TeV) {
        if      (ch == 0) return "(-2.52639) + (0.0553644)*@0 + (-0.000405676)*@0*@0 + (1.61242e-06)*@0*@0*@0 + (-3.78806e-09)*@0*@0*@0*@0 + (5.41746e-12)*@0*@0*@0*@0*@0 + (-4.63766e-15)*@0*@0*@0*@0*@0*@0 + (2.18648e-18)*@0*@0*@0*@0*@0*@0*@0 + (-4.37074e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
        else if (ch == 1) return "(-2.59319) + (0.0514931)*@0 + (-0.000369965)*@0*@0 + (1.46651e-06)*@0*@0*@0 + (-3.49839e-09)*@0*@0*@0*@0 + (5.1664e-12)*@0*@0*@0*@0*@0 + (-4.63104e-15)*@0*@0*@0*@0*@0*@0 + (2.30959e-18)*@0*@0*@0*@0*@0*@0*@0 + (-4.91469e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
        else              return "(-2.76074) + (0.0595281)*@0 + (-0.000455363)*@0*@0 + (1.90513e-06)*@0*@0*@0 + (-4.7343e-09)*@0*@0*@0*@0 + (7.17618e-12)*@0*@0*@0*@0*@0 + (-6.50896e-15)*@0*@0*@0*@0*@0*@0 + (3.24419e-18)*@0*@0*@0*@0*@0*@0*@0 + (-6.83026e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
    }
    else {
        if      (ch == 0) return "(-3.28633) + (0.0682262)*@0 + (-0.000496505)*@0*@0 + (1.9491e-06)*@0*@0*@0 + (-4.50967e-09)*@0*@0*@0*@0 + (6.33717e-12)*@0*@0*@0*@0*@0 + (-5.31633e-15)*@0*@0*@0*@0*@0*@0 + (2.44814e-18)*@0*@0*@0*@0*@0*@0*@0 + (-4.76086e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
        else if (ch == 1) return "(-2.59332) + (0.0490742)*@0 + (-0.000332895)*@0*@0 + (1.22995e-06)*@0*@0*@0 + (-2.70031e-09)*@0*@0*@0*@0 + (3.63235e-12)*@0*@0*@0*@0*@0 + (-2.94501e-15)*@0*@0*@0*@0*@0*@0 + (1.32399e-18)*@0*@0*@0*@0*@0*@0*@0 + (-2.53976e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
        else              return "(-3.02899) + (0.0623266)*@0 + (-0.000461463)*@0*@0 + (1.86983e-06)*@0*@0*@0 + (-4.51599e-09)*@0*@0*@0*@0 + (6.68363e-12)*@0*@0*@0*@0*@0 + (-5.94745e-15)*@0*@0*@0*@0*@0*@0 + (2.92147e-18)*@0*@0*@0*@0*@0*@0*@0 + (-6.08659e-22)*@0*@0*@0*@0*@0*@0*@0*@0";
    }

    return fss.str();
}

