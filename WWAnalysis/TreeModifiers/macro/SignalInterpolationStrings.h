#include <vector>
#include <iostream>
#include <iomanip>
#include <utility>
#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <cmath>
#include <algorithm>

int getSignalCBNLValueInt(int ch, bool do7TeV) {
    if (do7TeV) {
        if      (ch == 0) return 3;
        else if (ch == 1) return 3;
        else              return 3;
    }

    else {
        if      (ch == 0) return 3;
        else if (ch == 1) return 3;
        else              return 3;
    }
}

int getSignalCBNRValueInt(int ch, bool do7TeV) {
    if (do7TeV) {
        if      (ch == 0) return 4;
        else if (ch == 1) return 3;
        else              return 4;
    }

    else {
        if      (ch == 0) return 4;
        else if (ch == 1) return 3;
        else              return 4;
    }
}

std::string getSignalACBMeanString(int ch, bool do7TeV) {

    stringstream fss;
    fss << "( ";

    if (do7TeV) {
        if (ch == 0) fss << "(-4.08807) + (0.110583*@0) + (-0.00111048*@0*@0) + (5.04336e-06*@0*@0*@0) + (-1.03646e-08*@0*@0*@0*@0) + (7.79214e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(26.5702) + (-0.692027*@0) + (0.00680888*@0*@0) + (-3.24132e-05*@0*@0*@0) + (7.37704e-08*@0*@0*@0*@0) + (-6.37514e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(7.74041) + (-0.1993*@0) + (0.00199694*@0*@0) + (-1.00463e-05*@0*@0*@0) + (2.46727e-08*@0*@0*@0*@0) + (-2.33501e-11*@0*@0*@0*@0*@0)";
    }
    else {
        if (ch == 0) fss << "(-15.2428) + (0.42122*@0) + (-0.00447937*@0*@0) + (2.26779e-05*@0*@0*@0) + (-5.482e-08*@0*@0*@0*@0) + (5.05978e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-4.03873) + (0.142765*@0) + (-0.00182324*@0*@0) + (1.04662e-05*@0*@0*@0) + (-2.78456e-08*@0*@0*@0*@0) + (2.78107e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-10.9222) + (0.303444*@0) + (-0.00323681*@0*@0) + (1.63907e-05*@0*@0*@0) + (-3.96643e-08*@0*@0*@0*@0) + (3.6718e-11*@0*@0*@0*@0*@0)";
    }

    fss << " ) +  @0*@1";

    return fss.str();

}

std::string getSignalACBSigmaString(int ch, bool do7TeV) {
    stringstream fss;
    fss << "( ";

    if (do7TeV) {
        if (ch == 0) fss << "(-8.89255) + (0.22671*@0) + (-0.00198135*@0*@0) + (8.14781e-06*@0*@0*@0) + (-1.42808e-08*@0*@0*@0*@0) + (7.69453e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-42.9661) + (1.16387*@0) + (-0.0116153*@0*@0) + (5.54285e-05*@0*@0*@0) + (-1.25301e-07*@0*@0*@0*@0) + (1.07428e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-32.5568) + (0.867983*@0) + (-0.00861782*@0*@0) + (4.13108e-05*@0*@0*@0) + (-9.4314e-08*@0*@0*@0*@0) + (8.23655e-11*@0*@0*@0*@0*@0)";
    }
    else {
        if (ch == 0) fss << "(-7.90106) + (0.215914*@0) + (-0.00204471*@0*@0) + (9.51991e-06*@0*@0*@0) + (-2.05431e-08*@0*@0*@0*@0) + (1.67545e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(7.8429) + (-0.176575*@0) + (0.00186777*@0*@0) + (-8.96356e-06*@0*@0*@0) + (2.09583e-08*@0*@0*@0*@0) + (-1.91015e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-19.3154) + (0.526495*@0) + (-0.00518631*@0*@0) + (2.47189e-05*@0*@0*@0) + (-5.56479e-08*@0*@0*@0*@0) + (4.76618e-11*@0*@0*@0*@0*@0)";
    }
    fss << " ) * (1+@1)";
    return fss.str();
}

std::string getSignalACBAlphaLString(int ch, bool do7TeV) {
    stringstream fss;

    if (do7TeV) {
        if (ch == 0) fss << "(-16.9313) + (0.451691*@0) + (-0.00425974*@0*@0) + (1.91392e-05*@0*@0*@0) + (-4.09456e-08*@0*@0*@0*@0) + (3.3503e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-21.6016) + (0.602213*@0) + (-0.00620193*@0*@0) + (3.03257e-05*@0*@0*@0) + (-7.05553e-08*@0*@0*@0*@0) + (6.28615e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-19.1247) + (0.511858*@0) + (-0.00507084*@0*@0) + (2.40314e-05*@0*@0*@0) + (-5.4294e-08*@0*@0*@0*@0) + (4.70018e-11*@0*@0*@0*@0*@0)";
    }
    else {
        if (ch == 0) fss << "(-3.6088) + (0.107156*@0) + (-0.000832395*@0*@0) + (2.76884e-06*@0*@0*@0) + (-3.4753e-09*@0*@0*@0*@0) + (6.63626e-13*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-1.97072) + (0.0725852*@0) + (-0.000670387*@0*@0) + (2.75605e-06*@0*@0*@0) + (-4.67709e-09*@0*@0*@0*@0) + (2.41684e-12*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-14.6609) + (0.399488*@0) + (-0.00385576*@0*@0) + (1.74976e-05*@0*@0*@0) + (-3.71685e-08*@0*@0*@0*@0) + (2.97992e-11*@0*@0*@0*@0*@0)";
    }

    return fss.str();
}

std::string getSignalACBAlphaRString(int ch, bool do7TeV) {
    stringstream fss;

    if (do7TeV) {
        if (ch == 0) fss << "(-4.46307) + (0.166093*@0) + (-0.00176293*@0*@0) + (8.94642e-06*@0*@0*@0) + (-2.13451e-08*@0*@0*@0*@0) + (1.91314e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(110.088) + (-2.74006*@0) + (0.0263436*@0*@0) + (-0.000120005*@0*@0*@0) + (2.59845e-07*@0*@0*@0*@0) + (-2.1514e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(2.83488) + (-0.0208357*@0) + (8.703e-05*@0*@0)";
    }
    else {
        if (ch == 0) fss << "(-19.5288) + (0.525804*@0) + (-0.00487398*@0*@0) + (2.03764e-05*@0*@0*@0) + (-3.66955e-08*@0*@0*@0*@0) + (2.20557e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(134.772) + (-3.52321*@0) + (0.0358562*@0*@0) + (-0.000175381*@0*@0*@0) + (4.115e-07*@0*@0*@0*@0) + (-3.69445e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(10.0277) + (-0.243287*@0) + (0.0026732*@0*@0) + (-1.45571e-05*@0*@0*@0) + (3.9265e-08*@0*@0*@0*@0) + (-4.02105e-11*@0*@0*@0*@0*@0)";
    }

    return fss.str();
}


std::string getSignalCBMeanString(float m, int ch, bool do7TeV, bool doFFT) {
    stringstream fss;
    if (m<400.) fss << "( ";  

    if (!doFFT) fss << "@0 + ";

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-4.08807) + (0.110583*@0) + (-0.00111048*@0*@0) + (5.04336e-06*@0*@0*@0) + (-1.03646e-08*@0*@0*@0*@0) + (7.79214e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(26.5702) + (-0.692027*@0) + (0.00680888*@0*@0) + (-3.24132e-05*@0*@0*@0) + (7.37704e-08*@0*@0*@0*@0) + (-6.37514e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(7.74041) + (-0.1993*@0) + (0.00199694*@0*@0) + (-1.00463e-05*@0*@0*@0) + (2.46727e-08*@0*@0*@0*@0) + (-2.33501e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-15.2428) + (0.42122*@0) + (-0.00447937*@0*@0) + (2.26779e-05*@0*@0*@0) + (-5.482e-08*@0*@0*@0*@0) + (5.05978e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-4.03873) + (0.142765*@0) + (-0.00182324*@0*@0) + (1.04662e-05*@0*@0*@0) + (-2.78456e-08*@0*@0*@0*@0) + (2.78107e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-10.9222) + (0.303444*@0) + (-0.00323681*@0*@0) + (1.63907e-05*@0*@0*@0) + (-3.96643e-08*@0*@0*@0*@0) + (3.6718e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(-8.5) + (0.0594112*@0) + (-0.000104333*@0*@0) + (4.29597e-08*@0*@0*@0)";
        if (ch == 1) fss << "(-57.0151) + (0.279453*@0) + (-0.000428555*@0*@0) + (1.93863e-07*@0*@0*@0)";
        if (ch == 2) fss << "(82.1279) + (-0.457539*@0) + (0.000816838*@0*@0) + (-4.6665e-07*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-6.41691) + (0.0280361*@0) + (8.63703e-06*@0*@0) + (-6.02868e-08*@0*@0*@0)";
        if (ch == 1) fss << "(-99.8383) + (0.485366*@0) + (-0.000667099*@0*@0) + (2.41678e-07*@0*@0*@0)";
        if (ch == 2) fss << "(46.2677) + (-0.23461*@0) + (0.000415771*@0*@0) + (-2.49403e-07*@0*@0*@0)";
      }
    }

    if (m<400.) {
        if (ch == 0 || ch == 1) fss << " ) +  @0*@1";
        else                    fss << " ) +  @0*@1";
    }
    return fss.str();
}

std::string getSignalCBSigmaString(float m, int ch, bool do7TeV) {
    stringstream fss;
    if (m<400.) fss << "( ";  

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-8.89255) + (0.22671*@0) + (-0.00198135*@0*@0) + (8.14781e-06*@0*@0*@0) + (-1.42808e-08*@0*@0*@0*@0) + (7.69453e-12*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-42.9661) + (1.16387*@0) + (-0.0116153*@0*@0) + (5.54285e-05*@0*@0*@0) + (-1.25301e-07*@0*@0*@0*@0) + (1.07428e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-32.5568) + (0.867983*@0) + (-0.00861782*@0*@0) + (4.13108e-05*@0*@0*@0) + (-9.4314e-08*@0*@0*@0*@0) + (8.23655e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-7.90106) + (0.215914*@0) + (-0.00204471*@0*@0) + (9.51991e-06*@0*@0*@0) + (-2.05431e-08*@0*@0*@0*@0) + (1.67545e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(7.8429) + (-0.176575*@0) + (0.00186777*@0*@0) + (-8.96356e-06*@0*@0*@0) + (2.09583e-08*@0*@0*@0*@0) + (-1.91015e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-19.3154) + (0.526495*@0) + (-0.00518631*@0*@0) + (2.47189e-05*@0*@0*@0) + (-5.56479e-08*@0*@0*@0*@0) + (4.76618e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(-92.01) + (0.36984*@0) + (-0.000483809*@0*@0) + (3.35801e-07*@0*@0*@0)";
        if (ch == 1) fss << "(132.52) + (-0.797134*@0) + (0.00144076*@0*@0) + (-6.8979e-07*@0*@0*@0)";
        if (ch == 2) fss << "(41.2978) + (-0.237919*@0) + (0.000343944*@0*@0) + (-1.18454e-08*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "TMath::Max((-432.572) + (3.29719*@0) + (-0.0101818*@0*@0) + (1.56988e-05*@0*@0*@0) + (-1.15531e-08*@0*@0*@0*@0) + (3.3178e-12*@0*@0*@0*@0*@0),1.)";
        if (ch == 1) fss << "TMath::Max((477.628) + (-2.99693*@0) + (0.0067043*@0*@0) + (-6.53915e-06*@0*@0*@0) + (3.02364e-09*@0*@0*@0*@0) + (-5.31362e-13*@0*@0*@0*@0*@0),1.);";
        if (ch == 2) fss << "TMath::Max((-1368.8) + (12.213*@0) + (-0.0422059*@0*@0) + (7.02931e-05*@0*@0*@0) + (-5.59847e-08*@0*@0*@0*@0) + (1.71866e-11*@0*@0*@0*@0*@0),1.)";
      }
    }
    
    if (m<400.) {
        if (ch == 0 || ch == 1) fss << " ) * (1+@1)";
        else                    fss << " ) * (1+@1)";
    }
    return fss.str();
}

std::string getSignalCBAlphaLString(float m, int ch, bool do7TeV) {
    stringstream fss;
   
    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-16.9313) + (0.451691*@0) + (-0.00425974*@0*@0) + (1.91392e-05*@0*@0*@0) + (-4.09456e-08*@0*@0*@0*@0) + (3.3503e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-21.6016) + (0.602213*@0) + (-0.00620193*@0*@0) + (3.03257e-05*@0*@0*@0) + (-7.05553e-08*@0*@0*@0*@0) + (6.28615e-11*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-19.1247) + (0.511858*@0) + (-0.00507084*@0*@0) + (2.40314e-05*@0*@0*@0) + (-5.4294e-08*@0*@0*@0*@0) + (4.70018e-11*@0*@0*@0*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-3.6088) + (0.107156*@0) + (-0.000832395*@0*@0) + (2.76884e-06*@0*@0*@0) + (-3.4753e-09*@0*@0*@0*@0) + (6.63626e-13*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(-1.97072) + (0.0725852*@0) + (-0.000670387*@0*@0) + (2.75605e-06*@0*@0*@0) + (-4.67709e-09*@0*@0*@0*@0) + (2.41684e-12*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(-14.6609) + (0.399488*@0) + (-0.00385576*@0*@0) + (1.74976e-05*@0*@0*@0) + (-3.71685e-08*@0*@0*@0*@0) + (2.97992e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(2.17096) + (-0.00111638*@0)";
        if (ch == 1) fss << "(2.01281) + (-0.00136512*@0)";
        if (ch == 2) fss << "(1.94522) + (-0.0012104*@0)";
      }
      else {
        if (ch == 0) fss << "(-42.2779) + (0.443877*@0) + (-0.00157254*@0*@0) + (2.55569e-06*@0*@0*@0) + (-1.95761e-09*@0*@0*@0*@0) + (5.73647e-13*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(490.924) + (-3.40932*@0) + (0.00934933*@0*@0) + (-1.26364e-05*@0*@0*@0) + (8.42624e-09*@0*@0*@0*@0) + (-2.22e-12*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(444.048) + (-3.02643*@0) + (0.00816391*@0*@0) + (-1.08777e-05*@0*@0*@0) + (7.16619e-09*@0*@0*@0*@0) + (-1.86934e-12*@0*@0*@0*@0*@0)";
      }
    }

    return fss.str();
}

std::string getSignalCBNLString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "TMath::Max((46.8517) + (-1.07861*@0) + (0.0100183*@0*@0) + (-4.47408e-05*@0*@0*@0) + (9.58959e-08*@0*@0*@0*@0) + (-7.92287e-11*@0*@0*@0*@0*@0),1)";
        if (ch == 1) fss << "TMath::Max((-261.056) + (5.8594*@0) + (-0.047926*@0*@0) + (0.000186032*@0*@0*@0) + (-3.48259e-07*@0*@0*@0*@0) + (2.53758e-10*@0*@0*@0*@0*@0),1)";
        if (ch == 2) fss << "TMath::Max((-80.2755) + (1.92682*@0) + (-0.0163889*@0*@0) + (6.61152e-05*@0*@0*@0) + (-1.29134e-07*@0*@0*@0*@0) + (9.86492e-11*@0*@0*@0*@0*@0),1)";
      }
      else {
        if (ch == 0) fss << "TMath::Max((21.8412) + (-0.457725*@0) + (0.00405228*@0*@0) + (-1.69485e-05*@0*@0*@0) + (3.3184e-08*@0*@0*@0*@0) + (-2.44899e-11*@0*@0*@0*@0*@0),1)";
        if (ch == 1) fss << "TMath::Max((-68.5573) + (1.68878*@0) + (-0.0144006*@0*@0) + (5.76535e-05*@0*@0*@0) + (-1.11285e-07*@0*@0*@0*@0) + (8.38162e-11*@0*@0*@0*@0*@0),1)";
        if (ch == 2) fss << "TMath::Max((-13.9463) + (0.328247*@0) + (-0.00208904*@0*@0) + (5.30154e-06*@0*@0*@0) + (-4.91882e-09*@0*@0*@0*@0) + (4.42671e-13*@0*@0*@0*@0*@0),1)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "TMath::Max((22.7304) + (-0.0769053*@0) + (0.000125898*@0*@0) + (-6.21946e-08*@0*@0*@0),1)";
        if (ch == 1) fss << "TMath::Max((-64.4151) + (0.302132*@0) + (-0.000401769*@0*@0) + (1.75386e-07*@0*@0*@0),1)";
        if (ch == 2) fss << "TMath::Max((-27.4789) + (0.146712*@0) + (-0.000188824*@0*@0) + (7.99675e-08*@0*@0*@0),1)";
      }
      else {
        if (ch == 0) fss << "5.";
        if (ch == 1) fss << "5.";
        if (ch == 2) fss << "5.";
      }
    }

    return fss.str();
}

std::string getSignalCBAlphaRString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "(-4.46307) + (0.166093*@0) + (-0.00176293*@0*@0) + (8.94642e-06*@0*@0*@0) + (-2.13451e-08*@0*@0*@0*@0) + (1.91314e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(110.088) + (-2.74006*@0) + (0.0263436*@0*@0) + (-0.000120005*@0*@0*@0) + (2.59845e-07*@0*@0*@0*@0) + (-2.1514e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(2.83488) + (-0.0208357*@0) + (8.703e-05*@0*@0)";
      }
      else {
        if (ch == 0) fss << "(-19.5288) + (0.525804*@0) + (-0.00487398*@0*@0) + (2.03764e-05*@0*@0*@0) + (-3.66955e-08*@0*@0*@0*@0) + (2.20557e-11*@0*@0*@0*@0*@0)";
        if (ch == 1) fss << "(134.772) + (-3.52321*@0) + (0.0358562*@0*@0) + (-0.000175381*@0*@0*@0) + (4.115e-07*@0*@0*@0*@0) + (-3.69445e-10*@0*@0*@0*@0*@0)";
        if (ch == 2) fss << "(10.0277) + (-0.243287*@0) + (0.0026732*@0*@0) + (-1.45571e-05*@0*@0*@0) + (3.9265e-08*@0*@0*@0*@0) + (-4.02105e-11*@0*@0*@0*@0*@0)";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "(0.965224) + (9.63026e-05*@0)";
        if (ch == 1) fss << "(4.49443) + (-0.00436133*@0)";
        if (ch == 2) fss << "(0.878941) + (0.000326235*@0)";
      }
      else {
        if (ch == 0) fss << "(0.941385) + (9.68065e-05*@0)";
        if (ch == 1) fss << "(0.320852) + (0.00116058*@0)";
        if (ch == 2) fss << "(0.996315) + (7.40185e-06*@0)";
      }
    }

    return fss.str();
}

std::string getSignalCBNRString(float m, int ch, bool do7TeV) {
    stringstream fss;
    
    if (m<400.) {
      if (do7TeV) {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
      else {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
    }
    else {
      if (do7TeV) {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
      else {
        if (ch == 0) fss << "20";
        if (ch == 1) fss << "20";
        if (ch == 2) fss << "20";
      }
    }

    return fss.str();
}


std::string getSignalBWGammaString(float m, int ch, bool do7TeV) {
    stringstream fss;
    fss << "( ";  

    if (do7TeV) {
      if (ch == 0) fss << "TMath::Max((185.192) + (-1.15885*@0) + (0.0025093*@0*@0) + (-1.44677e-06*@0*@0*@0),30)";
      if (ch == 1) fss << "TMath::Max((-374.291) + (1.52069*@0) + (-0.00153017*@0*@0) + (4.37304e-07*@0*@0*@0),30)";
      if (ch == 2) fss << "TMath::Max((59.6861) + (-0.59096*@0) + (0.00169122*@0*@0) + (-1.05572e-06*@0*@0*@0),30)";
    }
    else {
      if (ch == 0) fss << "TMath::Max((17.9981) + (-0.0235633*@0) + (0.000160994*@0*@0),20)";
      if (ch == 1) fss << "TMath::Max((-7.17119) + (0.0763212*@0) + (6.92004e-05*@0*@0)+(0.1*@0-46.0)*(@0<450),20)";
      if (ch == 2) fss << "TMath::Max((-39.9023) + (0.177439*@0) + (2.3931e-07*@0*@0),20)";
    }

    fss << " ) * (1+@1)";    
    return fss.str();
}

std::string getSignalEBELandauMeanString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "(0.0134009) + (-8.01228e-05*@0) + (2.77214e-07*@0*@0)";
    if (ch == 1) fss << "(-0.00687259) + (0.000211674*@0) + (-7.26176e-07*@0*@0)";
    if (ch == 2) fss << "(0.0210129) + (-0.000220759*@0) + (8.7588e-07*@0*@0)";
  } 
  else {
    if (ch == 0) fss << "(0.146537) + (-0.00221371*@0) + (8.81577e-06*@0*@0)";
    if (ch == 1) fss << "(0.00798885) + (2.07364e-05*@0) + (-7.68043e-08*@0*@0)";
    if (ch == 2) fss << "(-0.0303858) + (0.000587672*@0) + (-2.21995e-06*@0*@0)";
  } 
  return fss.str();
}

std::string getSignalEBELandauSigmaString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "(-0.00408833) + (8.28301e-05*@0) + (-3.23195e-07*@0*@0)";
    if (ch == 1) fss << "(0.000955492) + (7.11031e-06*@0) + (-3.35679e-08*@0*@0)";
    if (ch == 2) fss << "(0.00379671) + (-4.41107e-05*@0) + (1.7516e-07*@0*@0)";
  } 
  else {
    if (ch == 0) fss << "(-0.00136417) + (3.93313e-05*@0) + (-1.5185e-07*@0*@0)";
    if (ch == 1) fss << "(0.0040108) + (-3.60197e-05*@0) + (1.16329e-07*@0*@0)";
    if (ch == 2) fss << "(-0.0164325) + (0.000268018*@0) + (-1.00625e-06*@0*@0)";
  } 
  return fss.str();
}

std::string getSignalEBELogNMeanString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "(0.0134009) + (-8.01228e-05*@0) + (2.77214e-07*@0*@0)";
    if (ch == 1) fss << "ERROR! not a log normal for 4e!";
    if (ch == 2) fss << "ERROR! not a log normal for 2e2mu!";
  } 
  else {
    if (ch == 0) fss << "(0.146537) + (-0.00221371*@0) + (8.81577e-06*@0*@0)";
    if (ch == 1) fss << "ERROR! not a log normal for 4e!";
    if (ch == 2) fss << "ERROR! not a log normal for 2e2mu!";
  } 
  return fss.str();
}

std::string getSignalEBELogNKString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "(1.09548) + (-0.00429616*@0) + (1.42497e-05*@0*@0)";
    if (ch == 1) fss << "ERROR! not a log normal for 4e!";
    if (ch == 2) fss << "ERROR! not a log normal for 2e2mu!";
  } 
  else {
    if (ch == 0) fss << "(1.35325) + (-0.00927874*@0) + (3.68071e-05*@0*@0)";
    if (ch == 1) fss << "ERROR! not a log normal for 4e!";
    if (ch == 2) fss << "ERROR! not a log normal for 2e2mu!";
  } 
  return fss.str();
}

std::string getSignalEBEGaussianMeanString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "ERROR! not a Gaussian for 4mu!";
    if (ch == 1) fss << "(0.0792865) + (-0.00094503*@0) + (3.55867e-06*@0*@0)";
    if (ch == 2) fss << "(0.0150001) + (-1.00122e-09*@0) + (3.89981e-12*@0*@0)";
  } 
  else {
    if (ch == 0) fss << "ERROR! not a Gaussian for 4mu!";
    if (ch == 1) fss << "(0.0481624) + (-0.00040788*@0) + (1.33567e-06*@0*@0)";
    if (ch == 2) fss << "(0.016304) + (1.22315e-05*@0) + (-1.4359e-07*@0*@0)";
  } 
  return fss.str();
}

std::string getSignalEBEGaussianSigmaString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "ERROR! not a Gaussian for 4mu!";
    if (ch == 1) fss << "(0.00812389) + (-4.66255e-05*@0) + (1.55668e-07*@0*@0)";
    if (ch == 2) fss << "(0.00853809) + (-6.01857e-05*@0) + (1.93121e-07*@0*@0)";
  } 
  else {
    if (ch == 0) fss << "ERROR! not a Gaussian for 4mu!";
    if (ch == 1) fss << "(-0.00433283) + (0.000134763*@0) + (-5.13103e-07*@0*@0)";
    if (ch == 2) fss << "(0.00421353) + (4.27287e-06*@0) + (-5.9121e-08*@0*@0)";
  } 
  return fss.str();
}

std::string getSignalEBELandauFracString(int ch, bool do7TeV) {
  stringstream fss;
  if (do7TeV) {
    if (ch == 0) fss << "(-6.35246) + (0.106138*@0) + (-0.000406468*@0*@0)";
    if (ch == 1) fss << "(-2.63862) + (0.0528919*@0) + (-0.000210164*@0*@0)";
    if (ch == 2) fss << "(-0.142724) + (0.0132325*@0) + (-4.92025e-05*@0*@0)";
  } 
  else {
    if (ch == 0) fss << "(0.407962) + (0.00116124*@0) + (-7.66417e-07*@0*@0)";
    if (ch == 1) fss << "(0.414303) + (0.00661032*@0) + (-4.01388e-05*@0*@0)";
    if (ch == 2) fss << "(-0.565547) + (0.0204287*@0) + (-8.13434e-05*@0*@0)";
  } 
  return fss.str();
}

std::string getYieldEfficiencyString(float m, int ch, bool do7TeV) {
    stringstream fss;

    if (do7TeV) {
        if      (ch == 0) return "(-3.08635) + (0.0679554)*@0 + (-0.000526951)*@0*@0 + (2.26112e-06)*@0*@0*@0 + (-5.9062e-09)*@0*@0*@0*@0 + (9.798e-12)*@0*@0*@0*@0*@0 + (-1.03871e-14)*@0*@0*@0*@0*@0*@0 + (6.81959e-18)*@0*@0*@0*@0*@0*@0*@0 + (-2.52507e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (4.02511e-25)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
        else if (ch == 1) return "(-2.27619) + (0.043756)*@0 + (-0.000289478)*@0*@0 + (1.00303e-06)*@0*@0*@0 + (-1.87872e-09)*@0*@0*@0*@0 + (1.60556e-12)*@0*@0*@0*@0*@0 + (3.11936e-16)*@0*@0*@0*@0*@0*@0 + (-1.88894e-18)*@0*@0*@0*@0*@0*@0*@0 + (1.49879e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (-4.03074e-25)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
        else              return "(-3.45434) + (0.0789099)*@0 + (-0.000672838)*@0*@0 + (3.2139e-06)*@0*@0*@0 + (-9.43741e-09)*@0*@0*@0*@0 + (1.77312e-11)*@0*@0*@0*@0*@0 + (-2.14103e-14)*@0*@0*@0*@0*@0*@0 + (1.60872e-17)*@0*@0*@0*@0*@0*@0*@0 + (-6.8494e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (1.26283e-24)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
    }
    else {
        if      (ch == 0) return "(-4.22679) + (0.0941929)*@0 + (-0.000787404)*@0*@0 + (3.697e-06)*@0*@0*@0 + (-1.07694e-08)*@0*@0*@0*@0 + (2.03056e-11)*@0*@0*@0*@0*@0 + (-2.4887e-14)*@0*@0*@0*@0*@0*@0 + (1.91647e-17)*@0*@0*@0*@0*@0*@0*@0 + (-8.4237e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (1.61098e-24)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
        else if (ch == 1) return "(-1.70039) + (0.0255186)*@0 + (-7.55951e-05)*@0*@0 + (-2.97324e-07)*@0*@0*@0 + (2.73506e-09)*@0*@0*@0*@0 + (-8.45742e-12)*@0*@0*@0*@0*@0 + (1.3969e-14)*@0*@0*@0*@0*@0*@0 + (-1.31198e-17)*@0*@0*@0*@0*@0*@0*@0 + (6.61749e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (-1.39472e-24)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
        else              return "(-3.4902) + (0.0755554)*@0 + (-0.000613446)*@0*@0 + (2.79798e-06)*@0*@0*@0 + (-7.88044e-09)*@0*@0*@0*@0 + (1.42651e-11)*@0*@0*@0*@0*@0 + (-1.66562e-14)*@0*@0*@0*@0*@0*@0 + (1.21307e-17)*@0*@0*@0*@0*@0*@0*@0 + (-5.0114e-21)*@0*@0*@0*@0*@0*@0*@0*@0 + (8.96369e-25)*@0*@0*@0*@0*@0*@0*@0*@0*@0";
    }

    return fss.str();
}

